# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.cards = []
        
    def __str__(self):
        message = 'Hand contains '
        for i in self.cards:
            message += str(i.__str__() + ' ')
        return message

    def add_card(self, card):
        self.cards.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        sum = 0
        for i in self.cards:
            sum += VALUES[i.get_rank()]
        for i in self.cards:
            if i.rank == 'A':
                if sum + 10 <= 21:
                    sum += 10
        return sum
   
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        for i in self.cards:
            i.draw(canvas, [pos[0] + self.cards.index(i) * (CARD_SIZE[0] - 30), pos[1]])
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for rank in RANKS:
            for suit in SUITS:
                self.deck.append(Card(suit, rank))
            

    def shuffle(self):
        random.shuffle(self.deck)

    def deal_card(self):
        return self.deck.pop()  
    
    def __str__(self):
        message = 'Deck contains '
        for item in self.deck:
            message += str(item.__str__() + ' ')
        return message

#define event handlers for buttons
def deal():
    global outcome, in_play, player, dealer, score, deck
    if in_play == True:
        score -= 1
    in_play = True
    deck = Deck().shuffle
    player = Hand()
    dealer = Hand()
    deck = Deck()
    deck.shuffle()
    player.add_card(deck.deal_card())
    player.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())
    outcome = "Hit or stand?"
    
def hit():
    global outcome, in_play, score
    # if the hand is in play, hit the player
    if in_play == True:
        if player.get_value() <= 21:
            player.add_card(deck.deal_card())
            if player.get_value() > 21:
                in_play = False
                outcome = 'You busted!!'
                score -= 1
    # if busted, assign a message to outcome, update in_play and score
       
def stand():  
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    # assign a message to outcome, update in_play and score
    global in_play, outcome, score
    if not in_play and outcome == 'You busted!!':
        outcome = 'You busted, new deal?'
    elif in_play == True:
        while dealer.get_value() < 17:
            dealer.add_card(deck.deal_card())
            if dealer.get_value() > 21:
                outcome = 'Dealer busted, you win!'
                score += 1
                in_play = False    
        if dealer.get_value() < player.get_value():
            outcome = 'Player wins!'
            score += 1
            in_play = False
        if dealer.get_value() > player.get_value():
            outcome = 'Dealer wins!'
            score -= 1
            in_play = False
    
    
# draw handler    
def draw(canvas):
    if in_play == True:
        dealer.draw(canvas, [100, 50])
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [136,98], CARD_SIZE)
    else:
        dealer.draw(canvas, [100, 50])
    player.draw(canvas, [100, 250])
    canvas.draw_text('BlackJack!', (375, 60), 50, 'black')
    canvas.draw_text('Dealer hand:', (50, 30), 25, 'black', 'sans-serif')
    canvas.draw_text('Player hand: ', (50, 230), 25, 'black', 'sans-serif')
    canvas.draw_text(outcome, (50, 375), 20, 'yellow')    
    canvas.draw_text('your score is ' + str(score), (100, 500), 55, 'black')    
        

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling
deal()
frame.start()
